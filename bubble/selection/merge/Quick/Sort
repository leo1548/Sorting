Nasir Hussain
Analysis of Algorithms
pyhton code:

BUBBLE SORT:
import copy
import time

def bubble_sort(arr):
    n = len(arr)
    comparisons = 0
    swaps = 0
    for i in range(n):
        swapped = False
        for j in range(0, n - i - 1):
            comparisons += 1
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
                swaps += 1
                swapped = True
        if not swapped:
            break
    return {"comparisons": comparisons, "swaps": swaps}

def display_results(case_name, sorted_arr, time_taken, stats):
    print(f"\n=== {case_name} Case ===")
    print(f"Sorted Array: {sorted_arr}")
    print(f"Time Taken: {time_taken:.6f} seconds")
    print(f"Total Comparisons: {stats['comparisons']}")
    print(f"Total Swaps: {stats['swaps']}")

def main():
    best_case = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    average_case = [3, 5, 1, 4, 2, 6, 9, 8, 10, 7]
    worst_case = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]

    best_case_sorted = copy.deepcopy(best_case)
    average_case_sorted = copy.deepcopy(average_case)
    worst_case_sorted = copy.deepcopy(worst_case)

    start_time = time.time()
    best_stats = bubble_sort(best_case_sorted)
    end_time = time.time()
    display_results("Best", best_case_sorted, end_time - start_time, best_stats)

    start_time = time.time()
    average_stats = bubble_sort(average_case_sorted)
    end_time = time.time()
    display_results("Average", average_case_sorted, end_time - start_time, average_stats)

    start_time = time.time()
    worst_stats = bubble_sort(worst_case_sorted)
    end_time = time.time()
    display_results("Worst", worst_case_sorted, end_time - start_time, worst_stats)

if __name__ == "__main__":
    main()

Selection Sort:
import copy
import time

def selection_sort(arr):
    n = len(arr)
    comparisons = 0
    swaps = 0
    for i in range(n):
        min_idx = i
        for j in range(i + 1, n):
            comparisons += 1
            if arr[j] < arr[min_idx]:
                min_idx = j
        if min_idx != i:
            arr[i], arr[min_idx] = arr[min_idx], arr[i]
            swaps += 1
    return {"comparisons": comparisons, "swaps": swaps}

def main():
    best_case = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    average_case = [3, 5, 1, 4, 2, 6, 9, 8, 10, 7]
    worst_case = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]

    best_case_sorted = copy.deepcopy(best_case)
    average_case_sorted = copy.deepcopy(average_case)
    worst_case_sorted = copy.deepcopy(worst_case)

    start_time = time.time()
    best_stats = selection_sort(best_case_sorted)
    end_time = time.time()
    display_results("Best", best_case_sorted, end_time - start_time, best_stats)

    start_time = time.time()
    average_stats = selection_sort(average_case_sorted)
    end_time = time.time()
    display_results("Average", average_case_sorted, end_time - start_time, average_stats)

    start_time = time.time()
    worst_stats = selection_sort(worst_case_sorted)
    end_time = time.time()
    display_results("Worst", worst_case_sorted, end_time - start_time, worst_stats)

if __name__ == "__main__":
    main()

Merge Sort:
 import copy
import time

def merge_sort(arr):
    comparisons = 0
    merges = 0

    def _merge_sort(arr, left, right):
        nonlocal comparisons, merges
        if left < right:
            mid = (left + right) // 2
            _merge_sort(arr, left, mid)
            _merge_sort(arr, mid + 1, right)
            comparisons, merges = merge(arr, left, mid, right, comparisons, merges)

    def merge(arr, left, mid, right, comparisons, merges):
        L = arr[left:mid + 1]
        R = arr[mid + 1:right + 1]
        i = j = 0
        k = left
        while i < len(L) and j < len(R):
            comparisons += 1
            if L[i] <= R[j]:
                arr[k] = L[i]
                i += 1
            else:
                arr[k] = R[j]
                j += 1
            k += 1
            merges += 1
        while i < len(L):
            arr[k] = L[i]
            i += 1
            k += 1
            merges += 1
        while j < len(R):
            arr[k] = R[j]
            j += 1
            k += 1
            merges += 1
        return comparisons, merges

    _merge_sort(arr, 0, len(arr) - 1)
    return {"comparisons": comparisons, "merges": merges}

def main():
    best_case = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    average_case = [3, 5, 1, 4, 2, 6, 9, 8, 10, 7]
    worst_case = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]

    best_case_sorted = copy.deepcopy(best_case)
    average_case_sorted = copy.deepcopy(average_case)
    worst_case_sorted = copy.deepcopy(worst_case)

    start_time = time.time()
    best_stats = merge_sort(best_case_sorted)
    end_time = time.time()
    display_results("Best", best_case_sorted, end_time - start_time, best_stats)

    start_time = time.time()
    average_stats = merge_sort(average_case_sorted)
    end_time = time.time()
    display_results("Average", average_case_sorted, end_time - start_time, average_stats)

    start_time = time.time()
    worst_stats = merge_sort(worst_case_sorted)
    end_time = time.time()
    display_results("Worst", worst_case_sorted, end_time - start_time, worst_stats)

if __name__ == "__main__":
    main()

Quick sort:

import copy
import time

def quick_sort(arr):
    comparisons = 0
    swaps = 0

    def _quick_sort(arr, low, high):
        nonlocal comparisons, swaps
        if low < high:
            pi, comparisons, swaps = partition(arr, low, high, comparisons, swaps)
            _quick_sort(arr, low, pi - 1)
            _quick_sort(arr, pi + 1, high)

    def partition(arr, low, high, comparisons, swaps):
        pivot = arr[high]
        i = low - 1
        for j in range(low, high):
            comparisons += 1
            if arr[j] <= pivot:
                i += 1
                arr[i], arr[j] = arr[j], arr[i]
                swaps += 1
        arr[i + 1], arr[high] = arr[high], arr[i + 1]
        swaps += 1
        return i + 1, comparisons, swaps

    _quick_sort(arr, 0, len(arr) - 1)
    return {"comparisons": comparisons, "swaps": swaps}

def main():
    best_case = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    average_case = [3, 5, 1, 4, 2, 6, 9, 8, 10, 7]
    worst_case = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]

    best_case_sorted = copy.deepcopy(best_case)
    average_case_sorted = copy.deepcopy(average_case)
    worst_case_sorted = copy.deepcopy(worst_case)

    start_time = time.time()
    best_stats = quick_sort(best_case_sorted)
    end_time = time.time()
    display_results("Best", best_case_sorted, end_time - start_time, best_stats)

    start_time = time.time()
    average_stats = quick_sort(average_case_sorted)
    end_time = time.time()
    display_results("Average", average_case_sorted, end_time - start_time, average_stats)

    start_time = time.time()
    worst_stats = quick_sort(worst_case_sorted)
    end_time = time.time()
    display_results("Worst", worst_case_sorted, end_time - start_time, worst_stats)

if


  
